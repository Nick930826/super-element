import { URI, integer, DocumentUri, uinteger } from 'vscode-languageserver-types';
import { ProtocolNotificationType, RegistrationType } from './messages';
import { StaticRegistrationOptions, NotebookDocumentFilter } from './protocol';
/**
 * Notebook specific client capabilities.
 *
 * @since 3.17.0 - proposed state
 */
export interface NotebookDocumentSyncClientCapabilities {
    /**
     * Whether implementation supports dynamic registration. If this is
     * set to `true` the client supports the new
     * `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
     * return value for the corresponding server capability as well.
     */
    dynamicRegistration?: boolean;
}
export interface $NotebookDocumentClientCapabilities {
    notebookDocument?: {
        synchronization: NotebookDocumentSyncClientCapabilities;
    };
}
/**
 * A notebook cell kind.
 *
 * @since 3.17.0 - proposed state
 */
export declare namespace NotebookCellKind {
    /**
     * A markup-cell is formatted source that is used for display.
     */
    const Markup: 1;
    /**
     * A code-cell is source code.
     */
    const Code: 2;
    function is(value: any): value is NotebookCellKind;
}
export declare type NotebookCellKind = 1 | 2;
/**
 * A notebook cell.
 *
 * @since 3.17.0 - proposed state
 */
export interface NotebookCell {
    /**
     * The cell's kind
     */
    kind: NotebookCellKind;
    /**
     * The cell's text represented as a text document.
     * The document's content is synced using the
     * existing text document sync notifications.
     */
    document: DocumentUri;
}
export declare namespace NotebookCell {
    function create(kind: NotebookCellKind, document: DocumentUri): NotebookCell;
    function is(value: any): value is NotebookCell;
    function equal(one: NotebookCell, two: NotebookCell): boolean;
}
/**
 * A change describing how to move a `NotebookCell`
 * array from state S' to S''.
 *
 * @since 3.17.0 - proposed state
 */
export interface NotebookCellChange {
    /**
     * The start oftest of the cell that changed.
     */
    start: uinteger;
    /**
     * The deleted cells
     */
    deleteCount: uinteger;
    /**
     * The new cells, if any
     */
    cells?: NotebookCell[];
}
export declare namespace NotebookCellChange {
    function is(value: any): value is NotebookCellChange;
    function create(start: uinteger, deleteCount: uinteger, cells?: NotebookCell[]): NotebookCellChange;
}
/**
 * A notebook document.
 *
 * @since 3.17.0 - proposed state
 */
export interface NotebookDocument {
    /**
     * The notebook document's uri.
     */
    uri: URI;
    /**
     * The type of the notebook.
     */
    notebookType: string;
    /**
     * The version number of this document (it will increase after each
     * change, including undo/redo).
     */
    version: integer;
    /**
     * The cells of a notebook.
     */
    cells: NotebookCell[];
}
export declare namespace NotebookDocument {
    function create(uri: URI, notebookType: string, version: integer, cells: NotebookCell[]): NotebookDocument;
    function is(value: any): value is NotebookDocument;
}
/**
 * A literal to identify a notebook document in the client.
 *
 * @since 3.17.0 - proposed state
 */
export interface NotebookDocumentIdentifier {
    /**
     * The notebook document's uri.
     */
    uri: URI;
}
/**
 * A versioned notebook document identifier.
 *
 * @since 3.17.0 - proposed state
 */
export interface VersionedNotebookDocumentIdentifier {
    /**
     * The version number of this notebook document.
     */
    version: integer;
    /**
     * The notebook document's uri.
     */
    uri: URI;
}
/**
 * Options specific to a notebook plus its cells
 * to be synced to the server.
 *
 * If a selector provider a notebook document
 * filter but no cell selector all cells of a
 * matching notebook document will be synced.
 *
 * If a selector provides no notebook document
 * filter but only a cell selector all notebook
 * document that contain at least one matching
 * cell will be synced.
 *
 * @since 3.17.0 - proposed state
 */
export declare type NotebookDocumentOptions = {
    notebookDocumentSelector?: ({
        /** The notebook documents to be synced */
        notebookDocumentFilter: NotebookDocumentFilter;
        /** The cells of the matching notebook to be synced */
        cellSelector?: {
            language: string;
        }[];
    } | {
        /** The notebook documents to be synced */
        notebookDocumentFilter?: NotebookDocumentFilter;
        /** The cells of the matching notebook to be synced */
        cellSelector: {
            language: string;
        }[];
    })[];
};
export interface $NotebookDocumentServerCapabilities {
    notebookDocumentSync?: NotebookDocumentOptions | NotebookDocumentRegistrationOptions;
}
/**
 * Registration options specific to a notebook.
 *
 * @since 3.17.0 - proposed state
 */
export declare type NotebookDocumentRegistrationOptions = NotebookDocumentOptions & StaticRegistrationOptions;
export declare namespace NotebookDocumentSyncRegistrationType {
    const method: 'notebookDocument/sync';
    const type: RegistrationType<NotebookDocumentRegistrationOptions>;
}
/**
 * The params sent in a open notebook document notification.
 *
 * @since 3.17.0 - proposed state
 */
export interface DidOpenNotebookDocumentParams {
    /**
     * The notebook document that got opened.
     */
    notebookDocument: NotebookDocument;
}
/**
 * A notification sent when a notebook opens.
 *
 * @since 3.17.0 - proposed state
 */
export declare namespace DidOpenNotebookDocumentNotification {
    const method: 'notebookDocument/didOpen';
    const type: ProtocolNotificationType<DidOpenNotebookDocumentParams, void>;
}
export interface NotebookDocumentChangeEvent {
    cells: NotebookCellChange;
}
export interface DidChangeNotebookDocumentParams {
    /**
     * The notebook document that did change. The version number points
     * to the version after all provided changes have been applied.
     */
    notebookDocument: VersionedNotebookDocumentIdentifier;
    /**
     * The actual changes to the notebook document.
     *
     * The changes describe single state changes to the notebook document.
     * So if there are two changes c1 (at array index 0) and c2 (at array
     * index 1) for a notebook in state S then c1 moves the notebook from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and
     * c2 is computed on the state S'.
     *
     * To mirror the content of a notebook using change events use the following approach:
     * - start with the same initial content
     * - apply the 'notebookDocument/didChange' notifications in the order you receive them.
     * - apply the `NotebookChangeEvent`s in a single notification in the order
     *   you receive them.
     */
    changes: NotebookDocumentChangeEvent[];
}
export declare namespace DidChangeNotebookDocumentNotification {
    const method: 'notebookDocument/didChange';
    const type: ProtocolNotificationType<DidChangeNotebookDocumentParams, void>;
}
/**
 * The params sent in a close notebook document notification.
 *
 * @since 3.17.0 - proposed state
 */
export interface DidCloseNotebookDocumentParams {
    /**
     * The notebook document that got opened.
     */
    notebookDocument: NotebookDocumentIdentifier;
}
/**
 * A notification sent when a notebook closes.
 *
 * @since 3.17.0 - proposed state
 */
export declare namespace DidCloseNotebookDocumentNotification {
    const method: 'notebookDocument/didClose';
    const type: ProtocolNotificationType<DidCloseNotebookDocumentParams, void>;
}
